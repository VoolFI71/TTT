#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
"""

import asyncio
import aiosqlite
from datetime import datetime, timedelta
from database import (
    init_db,
    get_all_users_expiring_in_days,
    mark_user_notified,
    get_user_data,
    check_user_payment
)
from config import DB_PATH, TOKEN
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

class NotificationTester:
    def __init__(self):
        self.bot = Bot(token=TOKEN)
    
    async def reset_notification_flags(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        async with aiosqlite.connect(DB_PATH) as conn:
            await conn.execute(
                "UPDATE users SET notified_3d = 0, notified_1d = 0, notified_expired = 0 WHERE user_id = ?",
                (user_id,)
            )
            await conn.commit()
            print(f"‚úÖ –§–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def create_test_subscription(self, user_id: int, days: int):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º"""
        from database import give_user_subscription
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self.reset_notification_flags(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        success = await give_user_subscription(user_id, days)
        if success:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {user_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
            return False
    
    async def send_test_notification(self, user_id: int, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await get_user_data(user_id)
            if not user_data:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            expiry_date, config = user_data
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='renew_sub')]
            ])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notification_type == "3d":
                text = (
                '''
‚è≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è</b>

<blockquote><i>–ù–µ —Ç–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.</i></blockquote>

–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry_date}</code>'''
                )
            elif notification_type == "1d":
                text = (
                    f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!</b>\n\n"
                    "<blockquote><i>–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∑–∞—â–∏—Ç—É.</i></blockquote>\n\n"
                    f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry_date}</code>"
                )
            elif notification_type == "expired":
                text = (
                    f"‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç—ë–∫–ª–∞</b>\n\n"
                    "<blockquote><i>–î–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.</i></blockquote>\n\n"
                    f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry_date}</code>"
                )
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            await mark_user_notified(user_id, notification_type)
            
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def test_notification_system(self, user_id: int):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 5 –¥–Ω–µ–π
        if not await self.create_test_subscription(user_id, 5):
            return
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        
        for days in [3, 1, 0]:
            users = await get_all_users_expiring_in_days(days, 10)
            print(f"   - –ó–∞ {days} –¥–Ω–µ–π: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            for uid, expiry, payment_method in users:
                if uid == user_id:
                    print(f"     ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ ({expiry}, {payment_method})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        
        for notification_type in ["3d", "1d", "expired"]:
            await self.send_test_notification(user_id, notification_type)
            await asyncio.sleep(1)
    
    async def check_notification_flags(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT notified_3d, notified_1d, notified_expired, notified_expiring_2d FROM users WHERE user_id = ?",
                (user_id,)
            )
            row = await cursor.fetchone()
            
            if row:
                notified_3d, notified_1d, notified_expired, notified_expiring_2d = row
                print(f"üìã –§–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}:")
                print(f"   - 3 –¥–Ω—è: {notified_3d}")
                print(f"   - 1 –¥–µ–Ω—å: {notified_1d}")
                print(f"   - –ò—Å—Ç–µ–∫–ª–∞: {notified_expired}")
                print(f"   - 2 –¥–Ω—è (—Å—Ç–∞—Ä–∞—è): {notified_expiring_2d}")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def simulate_expiring_subscriptions(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüé≠ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT user_id, expiry_date FROM users WHERE subscribed = 1 AND expiry_date IS NOT NULL"
            )
            users = await cursor.fetchall()
        
        if not users:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        now = datetime.now()
        for user_id, expiry_date in users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            try:
                for fmt in ['%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d']:
                    try:
                        exp = datetime.strptime(expiry_date, fmt)
                        days_left = (exp.date() - now.date()).days
                        print(f"   - {user_id}: {expiry_date} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)")
                        break
                    except ValueError:
                        continue
            except:
                print(f"   - {user_id}: {expiry_date} (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã)")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º"""
        await self.bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = NotificationTester()
    
    print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Shard VPN")
    print("=" * 50)
    
    try:
        await init_db()
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            print("3. –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            print("4. –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            print("5. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
            
            if choice == "1":
                user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
                await tester.test_notification_system(user_id)
            elif choice == "2":
                user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
                await tester.check_notification_flags(user_id)
            elif choice == "3":
                await tester.simulate_expiring_subscriptions()
            elif choice == "4":
                user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
                await tester.reset_notification_flags(user_id)
            elif choice == "5":
                user_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
                days = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: "))
                await tester.create_test_subscription(user_id, days)
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await tester.close()

if __name__ == "__main__":
    asyncio.run(main())
