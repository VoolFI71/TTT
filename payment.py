import uuid
import asyncio
import aiosqlite
import logging
from yookassa import Configuration, Payment
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, YOOKASSA_RETURN_URL, DB_PATH
from database import add_payment
from datetime import datetime
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆK–∞—Å—Å—ã
Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
active_checks = set()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
active_payment_tasks = set()

async def cancel_all_payment_tasks():
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    if active_payment_tasks:
        logging.info(f"–û—Ç–º–µ–Ω—è–µ–º {len(active_payment_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
        for task in active_payment_tasks.copy():
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        active_payment_tasks.clear()

async def create_payment(period: str, user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ –ÆK–∞—Å—Å–µ"""
    periods = {
        'special': {'value': '1.00', 'description': '7 –¥–Ω–µ–π'},
        '1': {'value': '99.00', 'description': '1 –º–µ—Å—è—Ü'},
        '3': {'value': '279.00', 'description': '3 –º–µ—Å—è—Ü–∞'},
        '6': {'value': '549.00', 'description': '6 –º–µ—Å—è—Ü–µ–≤'},
        '12': {'value': '999.00', 'description': '12 –º–µ—Å—è—Ü–µ–≤'}
    }
    
    if period not in periods:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏: {period}")
        return None
    
    try:
        payment = Payment.create({
            "amount": {
                "value": periods[period]['value'],
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": YOOKASSA_RETURN_URL
            },
            "capture": True,
            "description": f"Shard VPN: {periods[period]['description']}",
            "metadata": {
                "user_id": str(user_id),
                "period": period
            }
        }, str(uuid.uuid4()))
        
        return {
            'confirmation_url': payment.confirmation.confirmation_url,
            'payment_id': payment.id,
            'period': period
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", exc_info=True)
        return None

async def check_payment_status(payment_data: dict, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = payment_data['payment_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    current_task = asyncio.current_task()
    if current_task:
        active_payment_tasks.add(current_task)
    
    try:
        for _ in range(60):  # 10 –º–∏–Ω—É—Ç (60 –ø–æ–ø—ã—Ç–æ–∫ * 10 —Å–µ–∫—É–Ω–¥)
            try:
                payment = Payment.find_one(payment_id)
                
                if payment.status == "succeeded":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –î–û –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                    was_active = False
                    try:
                        async with aiosqlite.connect(DB_PATH) as conn:
                            cursor = await conn.execute(
                                "SELECT expiry_date FROM users WHERE user_id=?",
                                (payment_data['user_id'],)
                            )
                            row_before = await cursor.fetchone()
                            if row_before and row_before[0]:
                                expiry_str = row_before[0]
                                for fmt in ('%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d'):
                                    try:
                                        dt = datetime.strptime(expiry_str, fmt)
                                        was_active = datetime.now() < dt
                                        if was_active or True:
                                            break
                                    except ValueError:
                                        continue
                    except Exception:
                        was_active = False
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–ª–∞—Ç—É –≤ –ë–î
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    if payment_data['period'] == 'special':
                        period_months = 0  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    else:
                        period_months = int(payment_data['period'])

                    # –ÆKassa –ø–ª–∞—Ç–µ–∂
                    success = await add_payment(
                        payment_data['user_id'],
                        period_months,
                        payment_method='yookassa'
                    )
                    
                    if not success:
                        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î")
                        return False
                    
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º
                    try:
                        await bot.delete_message(
                            chat_id=payment_data['chat_id'],
                            message_id=payment_data['message_id']
                        )
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ—ë
                    async with aiosqlite.connect(DB_PATH) as conn:
                        cursor = await conn.execute(
                            "SELECT expiry_date FROM users WHERE user_id=?",
                            (payment_data['user_id'],)
                        )
                        row = await cursor.fetchone()
                        if row and row[0]:
                            try:
                                from datetime import datetime as dt
                                expiry_date = dt.strptime(row[0], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
                            except ValueError:
                                expiry_date = row[0]
                        else:
                            expiry_date = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                    action_word = "–ø—Ä–æ–¥–ª–µ–Ω–∞" if was_active else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    if payment_data['period'] == 'special':
                        period_text = "7 –¥–Ω–µ–π"
                    else:
                        period_text = f"{payment_data['period']} –º–µ—Å."
                    
                    await bot.send_message(
                        chat_id=payment_data['chat_id'],
                        text=f"""
<b>‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>

‚ú®–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>Shard VPN</b> {action_word}!

üìÖ–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{period_text}</b>
‚è≥–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_date}</b>

<blockquote><i>üîπ –ù–∞–∂–º–∏—Ç–µ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</i></blockquote>
""",
                        message_effect_id="5046509860389126442"
                    )
                    return True
                    
                elif payment.status in ("canceled", "failed"):
                    return False
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", exc_info=True)
            
            try:
                await asyncio.sleep(10)
            except asyncio.CancelledError:
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
        
        logging.warning(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç")
        return False
        
    except asyncio.CancelledError:
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return False
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_payment_status: {str(e)}", exc_info=True)
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if current_task:
            active_payment_tasks.discard(current_task)