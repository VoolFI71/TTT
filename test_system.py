#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import aiosqlite
from datetime import datetime, timedelta
from database import (
    init_db,
    get_referral_stats,
    get_all_referral_stats,
    get_all_users_expiring_in_days,
    mark_user_notified,
    add_bot_user,
    give_user_subscription,
    add_referral,
    get_user_data,
    check_user_payment
)
from config import DB_PATH

class SystemTester:
    def __init__(self):
        self.test_users = []
    
    async def setup_test_users(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_user_ids = [999001, 999002, 999003, 999004, 999005]
        
        for user_id in test_user_ids:
            await add_bot_user(
                user_id=user_id,
                username=f"test_user_{user_id}",
                first_name=f"Test{user_id}",
                last_name="User"
            )
            self.test_users.append(user_id)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    async def test_referral_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        if len(self.test_users) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        referrer_id = self.test_users[0]
        referred_id = self.test_users[1]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        success = await add_referral(referrer_id, referred_id)
        if success:
            print(f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {referred_id} -> {referrer_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        stats = await get_referral_stats(referrer_id)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}:")
        print(f"   - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}")
        print(f"   - –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['subscribed_referrals']}")
        print(f"   - –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {stats['unsubscribed_referrals']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_stats = await get_all_referral_stats()
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:")
        print(f"   - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {all_stats['total_referrals']}")
        print(f"   - –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {all_stats['subscribed_referrals']}")
        print(f"   - –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {all_stats['unsubscribed_referrals']}")
        
        if all_stats['top_referrers']:
            print(f"   - –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä—ã: {len(all_stats['top_referrers'])}")
    
    
    async def test_notifications(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 3 –¥–Ω—è
        users_3d = await get_all_users_expiring_in_days(3, 10)
        print(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {len(users_3d)}")
        for user_id, expiry, payment_method in users_3d[:3]:
            print(f"   - {user_id}: {expiry} ({payment_method})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 1 –¥–µ–Ω—å
        users_1d = await get_all_users_expiring_in_days(1, 10)
        print(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {len(users_1d)}")
        for user_id, expiry, payment_method in users_1d[:3]:
            print(f"   - {user_id}: {expiry} ({payment_method})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_expired = await get_all_users_expiring_in_days(0, 10)
        print(f"üìÖ –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users_expired)}")
        for user_id, expiry, payment_method in users_expired[:3]:
            print(f"   - {user_id}: {expiry} ({payment_method})")
    
    async def create_test_subscriptions(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        if len(self.test_users) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cases = [
            (self.test_users[0], 1),  # 1 –¥–µ–Ω—å
            (self.test_users[1], 3),  # 3 –¥–Ω—è
            (self.test_users[2], 7),  # 7 –¥–Ω–µ–π
        ]
        
        for user_id, days in test_cases:
            success = await give_user_subscription(user_id, days)
            if success:
                print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {user_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
    
    async def check_database_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        async with aiosqlite.connect(DB_PATH) as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
            cursor = await conn.execute("SELECT COUNT(*) FROM bot_users")
            bot_users_count = (await cursor.fetchone())[0]
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {bot_users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute("SELECT COUNT(*) FROM users")
            vpn_users_count = (await cursor.fetchone())[0]
            print(f"üåê VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vpn_users_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            cursor = await conn.execute("SELECT COUNT(*) FROM users WHERE subscribed = 1")
            active_subs = (await cursor.fetchone())[0]
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
            cursor = await conn.execute("SELECT COUNT(*) FROM payments")
            payments_count = (await cursor.fetchone())[0]
            print(f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {payments_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor = await conn.execute("SELECT COUNT(*) FROM referrals")
            referrals_count = (await cursor.fetchone())[0]
            print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}")
    
    async def cleanup_test_data(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        async with aiosqlite.connect(DB_PATH) as conn:
            for user_id in self.test_users:
                await conn.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
                await conn.execute("DELETE FROM payments WHERE user_id = ?", (user_id,))
                await conn.execute("DELETE FROM bot_users WHERE user_id = ?", (user_id,))
                await conn.execute("DELETE FROM referrals WHERE referrer_id = ? OR referred_id = ?", (user_id, user_id))
            
            await conn.commit()
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {len(self.test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        await init_db()
        await self.setup_test_users()
        await self.check_database_state()
        await self.test_referral_system()
        await self.create_test_subscriptions()
        await self.test_notifications()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup = input("\nüßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower().strip()
        if cleanup == 'y':
            await self.cleanup_test_data()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    
    print("üîß –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Shard VPN")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("5. –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        if choice == "1":
            await tester.run_all_tests()
        elif choice == "2":
            await init_db()
            await tester.setup_test_users()
            await tester.test_referral_system()
        elif choice == "3":
            await init_db()
            await tester.test_notifications()
        elif choice == "4":
            await init_db()
            await tester.check_database_state()
        elif choice == "5":
            await init_db()
            await tester.cleanup_test_data()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
