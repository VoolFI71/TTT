import logging
import asyncio
import aiohttp
from aiogram import types, F, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, LabeledPrice
from datetime import datetime

from config import TOKEN, WELCOME_GIF_URL, STARS_PROVIDER_TOKEN, ADMIN_IDS, PRICES, CHANNEL_ID
from database import (
    init_db, check_user_payment, add_payment, get_user_data, add_bot_user,
    get_users_expiring_in_days, get_all_users_expiring_in_days, 
    mark_user_notified, has_paid_subscription
)
from payment import create_payment, check_payment_status, cancel_all_payment_tasks
from yookassa import Payment
from keyboards import (
    create_main_keyboard, get_subscription_keyboard, get_profile_keyboard, get_user_keyboard
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
from admin_panel import register_admin_handlers
dp = Dispatcher()
register_admin_handlers(dp)

def get_price_for_period(period: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if period == 'special':
        return 10
    return PRICES.get(period, PRICES['1']) // 100

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö (1 –∑–≤–µ–∑–¥–∞ ‚âà 1‚ÇΩ)
STARS_PRICES = {
    'special': 10,  # ~10‚ÇΩ
    '1': 99,   # 99‚ÇΩ –∑–∞ –º–µ—Å—è—Ü
    '3': 279,  # 279‚ÇΩ –∑–∞ 3 –º–µ—Å—è—Ü–∞
    '6': 549,  # 549‚ÇΩ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤
    '12': 999  # 999‚ÇΩ –∑–∞ –≥–æ–¥
}

def get_stars_price(period: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return STARS_PRICES.get(period, STARS_PRICES['1'])

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if user_id in ADMIN_IDS:
            return True
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    
    success = await add_bot_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    if success:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –±–æ—Ç–∞")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –±–∞–∑—É –±–æ—Ç–∞")
    
    welcome_text = f"""üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Shard VPN!</b>

–°–≤–æ–±–æ–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–º–µ–¥–ª–µ–Ω–∏–π. –° <b>Shard VPN</b> —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:
‚Ä¢ ‚ö°Ô∏è –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
‚Ä¢ üîí –ù–∞–¥—ë–∂–Ω—É—é –∑–∞—â–∏—Ç—É
‚Ä¢ üåê –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü

<blockquote><i>üí≥–ö—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!</i></blockquote>"""
    
    await message.answer_animation(
        animation=WELCOME_GIF_URL,
        caption=welcome_text,
        reply_markup=create_main_keyboard()
    )



async def get_vpn_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await get_user_data(user_id)
    has_paid = await check_user_payment(user_id)
    
    if not user_data:
        return None, None, None
    
    expiry_date, config = user_data
    is_active = has_paid

    # –ü–æ–ª—É—á–∞–µ–º sub_key –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    timeout = aiohttp.ClientTimeout(total=10)
    headers = {"X-API-Key": "18181818", "Accept": "application/json"}
    
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"https://shardtg.ru/sub/{user_id}", headers=headers) as resp:
                if resp.status != 200:
                    return None, None, None
                data = await resp.json()
    except Exception:
        return None, None, None

    sub_key = data.get("sub_key")
    if not sub_key:
        return None, None, None

    miniapp_link = f"https://shardtg.ru/subscription/{sub_key}"
    return miniapp_link, expiry_date, is_active

async def send_vpn_message(message_or_callback, user_id: int, is_edit: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ VPN"""
    vpn_info = await get_vpn_info(user_id)
    
    if vpn_info[0] is None:
        if is_edit:
            await message_or_callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message_or_callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    miniapp_link, expiry_date, is_active = vpn_info

    if is_active:
        text = f"""<b>üåê Shard VPN</b>

<b>üîó –ö–ª—é—á:</b>
<code>{miniapp_link}</code>

üìå–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - <b>–ê–∫—Ç–∏–≤–Ω–∞ üü¢</b>
‚è≥–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ - <b>{expiry_date}</b>

<blockquote><i>üí° –ù–∞–∂–º–∏—Ç–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.</i></blockquote>"""
    else:
        text = f"""<b>üåê Shard VPN</b>

<b>üîó –ö–ª—é—á:</b>
<code>{miniapp_link}</code>

–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - <b>–Ω–µ –ê–∫—Ç–∏–≤–Ω–∞ üî¥</b>

<blockquote><i>üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</i></blockquote>"""

    if is_edit:
        await message_or_callback.message.edit_text(
            text, reply_markup=get_user_keyboard(True), 
            parse_mode="HTML", disable_web_page_preview=True
        )
    else:
        await message_or_callback.answer(
            text, reply_markup=get_user_keyboard(True), 
            parse_mode="HTML", disable_web_page_preview=True
        )

@dp.message(F.text == "üåê–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN")
async def connect_vpn(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    
    if not user_data:
        return await show_subscription_options(message)
    
    await send_vpn_message(message, user_id)
                                                
async def show_subscription_options(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_paid = await has_paid_subscription(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ (–¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    user_data = await get_user_data(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
    show_special = not has_paid and not user_data
    
    if user_data and not has_paid:
        # –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        text = """<b>üë®üèª‚Äçüíª–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
"""
    else:
        # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        text = """<b>üë®üèª‚Äçüíª–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
"""
    
    await message.answer(
        text=text,
        reply_markup=get_subscription_keyboard(show_special),
    )

@dp.callback_query(F.data.startswith('sub_'))
async def subscription_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        period = callback.data.split('_')[1]
        
        payment_info = await create_payment(period, callback.from_user.id)
        if not payment_info:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        payment_data = {
            'payment_id': payment_info['payment_id'],
            'user_id': callback.from_user.id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id,
            'period': payment_info['period']
        }
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        asyncio.create_task(check_payment_status(payment_data, bot))
        
        pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ÆKassa",
                url=payment_info['confirmation_url']
            )],
            [InlineKeyboardButton(
                text="üåü –û–ø–ª–∞—Ç–∏—Ç—å Stars",
                callback_data=f"pay_stars_{period}"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back"
            )]
        ])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if period == 'special':
            period_text = "7 –¥–Ω–µ–π"
        else:
            period_text = f"{period} –º–µ—Å."
        
        await callback.message.edit_text(
            text=f'''<b>üóì –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_text}</b>

<b>üí∞–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {get_price_for_period(period)}‚ÇΩ

<blockquote><i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:</i></blockquote>

            ''',
            reply_markup=pay_keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data == 'back')
async def back_to_subscriptions(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        has_paid = await has_paid_subscription(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ (–¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
        user_data = await get_user_data(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
        show_special = not has_paid and not user_data
        
        if user_data and not has_paid:
            # –ò—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = """<b>üë®üèª‚Äçüíª–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
"""
        else:
            # –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            text = """<b>üë®üèª‚Äçüíª–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
"""
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_subscription_keyboard(show_special)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        
@dp.callback_query(F.data.startswith('check_pay:'))
async def check_payment_callback(callback: types.CallbackQuery):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = callback.data.split(':')[1]
    
    try:
        payment = await Payment.find_one(payment_id)
        
        if payment.status == "succeeded":
            await callback.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        elif payment.status == "pending":
            await callback.answer(
                "–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        else:
            await callback.answer(
                f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            show_alert=True
        )

async def get_profile_info(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    has_paid = await check_user_payment(user_id)
    user_data = await get_user_data(user_id)
    
    if has_paid and user_data:
        expiry_date, _ = user_data
        text = f"""<b>üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üìå–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - <b>–ê–∫—Ç–∏–≤–Ω–∞ üü¢</b>
‚è≥–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ - <b>{expiry_date}</b>"""
        return text, get_profile_keyboard(True)
    elif user_data:
        text = f"""<b>üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - <b>–Ω–µ –ê–∫—Ç–∏–≤–Ω–∞ üî¥</b>

<blockquote><i>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i></blockquote>"""
        return text, get_profile_keyboard(True)
    else:
        text = f"""<b>üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - <b>–Ω–µ –ê–∫—Ç–∏–≤–Ω–∞ üî¥</b>

<blockquote><i>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</i></blockquote>"""
        return text, get_profile_keyboard(False)

@dp.message(F.text == "üëæ–ê–∫–∫–∞—É–Ω—Ç")
async def profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    text, reply_markup = await get_profile_info(user_id)
    await message.answer(text, reply_markup=reply_markup)



@dp.callback_query(F.data == 'subscribe_from_profile')
async def subscribe_from_profile(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    await show_subscription_options(callback.message)
    await callback.answer()

@dp.callback_query(F.data == 'referrals')
async def referrals_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    await callback.answer("–°–∫–æ—Ä–æ", show_alert=True)



@dp.callback_query(F.data == 'back_to_profile')
async def back_to_profile_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    user_id = callback.from_user.id
    text, reply_markup = await get_profile_info(user_id)
    await callback.message.edit_text(text, reply_markup=reply_markup)
    await callback.answer()

@dp.message(F.text == "üîí–û VPN")
async def info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.answer(
        text="""üåê <b>Shard VPN ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</b>

–í –æ—Å–Ω–æ–≤–µ Shard VPN –ª–µ–∂–∏—Ç –ø–µ—Ä–µ–¥–æ–≤–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º. –û–Ω –¥–∞—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, –∞ –∫–∞–Ω–∞–ª—ã <b>10 –ì–±–∏—Ç/—Å</b> –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å.

üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ</b>
–ñ—É—Ä–Ω–∞–ª—ã –ª–æ–≥–æ–≤ —É–¥–∞–ª—è—é—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ ‚Äî –º—ã <b>–Ω–µ —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π</b>, –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ –ø—Ä–æ–¥–∞—ë–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.

‚ö°Ô∏è <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Shard VPN:</b>
‚Äî –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚Äî –ü–æ–ª–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫

<blockquote><i>üì© –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.</i></blockquote>""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")]
        ])
    )

@dp.callback_query(F.data == 'instruction_from_vpn')
async def show_instructions_from_vpn(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN)"""
    devices_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
        InlineKeyboardButton(text="üì± iOS", callback_data='instruction_ios'),
        InlineKeyboardButton(text="ü§ñ Android", callback_data='instruction_android')
        ],
        [
        InlineKeyboardButton(text="üíª Windows", callback_data='instruction_win'),
        InlineKeyboardButton(text="üçé macOS", callback_data='instruction_mac')
        ],
        [InlineKeyboardButton(text="üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_vpn')]
    ])
    
    await callback.message.edit_text(
        text="""üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –º—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å.""",
        reply_markup=devices_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == 'back_to_vpn')
async def back_to_vpn_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    user_data = await get_user_data(user_id)
    
    if not user_data:
        await callback.message.edit_text(
            text="""<b>üë®üèª‚Äçüíª–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>""",
            reply_markup=get_subscription_keyboard(True)
        )
    else:
        await send_vpn_message(callback, user_id, is_edit=True)
    
    await callback.answer()

@dp.callback_query(F.data == 'instruction')
async def show_instructions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–∑–∞–¥ –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)"""
    devices_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
        InlineKeyboardButton(text="üì± iOS", callback_data='instruction_ios'),
        InlineKeyboardButton(text="ü§ñ Android", callback_data='instruction_android')
        ],
        [
        InlineKeyboardButton(text="üíª Windows", callback_data='instruction_win'),
        InlineKeyboardButton(text="üçé macOS", callback_data='instruction_mac')
        ],
        [InlineKeyboardButton(text="üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_vpn')]
    ])
    
    await callback.message.edit_text(
        text="""üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –º—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å.""",
        reply_markup=devices_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith('instruction_'))
async def show_device_instructions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device = callback.data.split('_')[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_data(user_id)
    if not user_data:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    expiry_date, config = user_data
    config_clean = str(config).strip('\"\'')
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG instructions: user_id={user_id}, config={config}, config_clean={config_clean}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ config –Ω–µ –ø—É—Å—Ç–æ–π
    if not config_clean or config_clean == 'None':
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VPN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º sub_key –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∫–∞–∫ –≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN)
    timeout = aiohttp.ClientTimeout(total=10)
    headers = {
        "X-API-Key": "18181818",
        "Accept": "application/json",
    } 
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"https://shardtg.ru/sub/{user_id}", headers=headers) as resp:
                if resp.status != 200:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                    return
                data = await resp.json()
    except Exception:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    sub_key = data.get("sub_key")
    if not sub_key:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    miniapp_link = f"https://shardtg.ru/subscription/{sub_key}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if device in ['ios', 'android', 'win', 'mac']:
        app_url = {
            'ios': 'https://apps.apple.com/us/app/v2raytun/id6476628951?l=ru',
            'android': 'https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru&pli=1',
            'win': 'https://v2raytun.com',
            'mac': 'https://v2raytun.com'
        }.get(device)
        
        if app_url:
            buttons.append([InlineKeyboardButton(text="üíª –°–∫–∞—á–∞—Ç—å V2RayTun", url=app_url)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ subscription —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
    buttons.append([InlineKeyboardButton(text="üíé –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN", url=miniapp_link)])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    instructions = {
        'ios': f"""
üìñ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SHARD VPN –Ω–∞ IPhone:</b>

<blockquote><i>1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun –∏–∑ App Store (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

3. –í –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ v2RayTun¬ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

4. –í—Å—ë –≥–æ—Ç–æ–≤–æ üéâ VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.</i></blockquote>

<b>üë®‚Äçüíª –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –ø–æ–º–æ–∂–µ–º.</b>
""",
        'android': f"""
üìñ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SHARD VPN –Ω–∞ Android:</b>

<blockquote><i>1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun –∏–∑ Google Play (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

3. –í –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ v2RayTun¬ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

4. –í—Å—ë –≥–æ—Ç–æ–≤–æ üéâ VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.</i></blockquote>

<b>üë®‚Äçüíª –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –ø–æ–º–æ–∂–µ–º.</b>
""",
        'win': f"""
üìñ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SHARD VPN –Ω–∞ Windows:</b>
 
<blockquote><i>1. C–∫–∞—á–∞–π—Ç–µ v2RayTun —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

3. –í –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é¬ª.

4. –û—Ç–∫—Ä–æ–π—Ç–µ v2RayTun –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.

5. –í—Å—ë –≥–æ—Ç–æ–≤–æ üéâ VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.</i></blockquote>

<b>üë®‚Äçüíª –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –ø–æ–º–æ–∂–µ–º.</b>
""",
        'mac': f"""
üìñ <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Shard VPN –Ω–∞ MacOS (2021+):</b>
    
<blockquote><i>1. C–∫–∞—á–∞–π—Ç–µ v2RayTun —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ).

3. –ù–∞ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ v2RayTun¬ª.

4. –í—Å—ë –≥–æ—Ç–æ–≤–æ üéâ VPN –ø–æ–¥–∫–ª—é—á—ë–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.</i></blockquote>


<b>üë®‚Äçüíª –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –ø–æ–º–æ–∂–µ–º.</b>
"""
    }
    
    if device in instructions:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='instruction')])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            text=instructions[device],
            reply_markup=reply_markup
        )
    else:
        await callback.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == 'renew_sub')
async def renew_subscription(callback: types.CallbackQuery):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ (–∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–µ–π)
    user_data = await get_user_data(user_id)
    has_paid = await check_user_payment(user_id)
    
    if user_data or has_paid:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∞—è) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await callback.message.answer(
            text="""<b>üîí–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!</b>

<blockquote><i>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</i></blockquote>
""",
            reply_markup=get_subscription_keyboard()
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–æ–±—â–µ
        await callback.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
            show_alert=True
        )
        await show_subscription_options(callback.message)
    
    await callback.answer()

# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars -----
@dp.callback_query(F.data.startswith('pay_stars_'))
async def pay_stars_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ Telegram Stars"""
    period = callback.data.split('_')[2]
    stars_price = get_stars_price(period)
    prices = [LabeledPrice(label=f"{period} –º–µ—Å.", amount=stars_price)]

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="Shard VPN –ø–æ–¥–ø–∏—Å–∫–∞",
        description=f"{period} –º–µ—Å. –ø–æ–¥–ø–∏—Å–∫–∏",
        payload=f"stars_sub_{period}_{callback.from_user.id}",
        provider_token=STARS_PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
    )
    await callback.answer()

@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout: types.PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –∑–≤—ë–∑–¥–∞–º–∏"""
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    payload = message.successful_payment.invoice_payload
    if payload.startswith('stars_sub_'):
        try:
            _, _, period_str, user_id_str = payload.split('_')
            period = int(period_str)
            user_id = int(user_id_str)
        except ValueError:
            period = 1
            user_id = message.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        was_active = await check_user_payment(user_id)

        success = await add_payment(user_id, period)
        if not success:
            await message.answer("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return


        user_data = await get_user_data(user_id)
        expiry_date = user_data[0] if user_data else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

        action_word = "–ø—Ä–æ–¥–ª–µ–Ω–∞" if was_active else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if period == 'special':
            period_text = "7 –¥–Ω–µ–π"
        else:
            period_text = f"{period} –º–µ—Å."
        
        await message.answer(
            text=f"""<b>‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>

‚ú®–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>Shard VPN</b> {action_word}!

üìÖ–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{period_text}</b>
‚è≥–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{expiry_date}</b>

<blockquote><i>üîπ –ù–∞–∂–º–∏—Ç–µ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</i></blockquote>""",
            reply_markup=create_main_keyboard()
        )
async def send_notification(user_id: int, text: str, notification_type: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='renew_sub')]
        ])
        await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
        await mark_user_notified(user_id, notification_type)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

async def main():
    await init_db()
    shutdown_event = asyncio.Event()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 2 –¥–Ω—è
    async def notify_expiring_loop():
        while not shutdown_event.is_set():
            try:
                users = await get_users_expiring_in_days(2, 500)
                for user_id, expiry in users:
                    if shutdown_event.is_set():
                        break
                    text = (
                        "‚è≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç</b>\n\n"
                        "<blockquote><i>–û—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è. –ù–µ —Ç–µ—Ä—è–π—Ç–µ –∑–∞—â–∏—Ç—É –∏ —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.</i></blockquote>\n\n"
                        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry}</code>"
                    )
                    await send_notification(user_id, text, '2d')
                
                await asyncio.wait_for(shutdown_event.wait(), timeout=60 * 60)
            except asyncio.TimeoutError:
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_expiring_loop: {e}")
                await asyncio.wait_for(shutdown_event.wait(), timeout=60 * 10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def notify_all_expiring_loop():
        while not shutdown_event.is_set():
            try:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è
                users_3d = await get_all_users_expiring_in_days(3, 500)
                for user_id, expiry, _ in users_3d:
                    if shutdown_event.is_set():
                        break
                    text = (
                        f"‚è≥ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è</b>\n\n"
                        "<blockquote><i>–ù–µ —Ç–µ—Ä—è–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±—ã—Å—Ç—Ä–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É VPN ‚Äî –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.</i></blockquote>\n\n"
                        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry}</code>"
                    )
                    await send_notification(user_id, text, '3d')

                if shutdown_event.is_set():
                    break

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å
                users_1d = await get_all_users_expiring_in_days(1, 500)
                for user_id, expiry, _ in users_1d:
                    if shutdown_event.is_set():
                        break
                    text = (
                        f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!</b>\n\n"
                        "<blockquote><i>–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∑–∞—â–∏—Ç—É.</i></blockquote>\n\n"
                        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry}</code>"
                    )
                    await send_notification(user_id, text, '1d')

                if shutdown_event.is_set():
                    break

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                users_expired = await get_all_users_expiring_in_days(0, 500)
                for user_id, expiry, _ in users_expired:
                    if shutdown_event.is_set():
                        break
                    text = (
                        f"‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç—ë–∫–ª–∞</b>\n\n"
                        f"<blockquote><i>–î–æ—Å—Ç—É–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.</i></blockquote>\n\n"
                        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{expiry}</code>"
                    )
                    await send_notification(user_id, text, 'expired')

                await asyncio.wait_for(shutdown_event.wait(), timeout=60 * 60)
            except asyncio.TimeoutError:
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_all_expiring_loop: {e}")
                await asyncio.wait_for(shutdown_event.wait(), timeout=60 * 10)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∏—Ö
    task1 = asyncio.create_task(notify_expiring_loop())
    task2 = asyncio.create_task(notify_all_expiring_loop())
    
    try:
        await dp.start_polling(bot)
    finally:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        shutdown_event.set()
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        await cancel_all_payment_tasks()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(asyncio.gather(task1, task2, return_exceptions=True), timeout=5.0)
        except asyncio.TimeoutError:
            logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥")
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task in [task1, task2]:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()
