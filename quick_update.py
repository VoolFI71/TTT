#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–∑–æ–≤–∏—Ç–µ
"""

import asyncio
import aiohttp
import aiosqlite
from datetime import datetime
from config import DB_PATH

async def quick_update_users(location_code, server_url, api_key):
    """
    –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–µ–π
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    await quick_update_users("us", "https://us.shardtg.ru", "18181818")
    """
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–æ–∫–∞—Ü–∏–µ–π: {location_code}")
    
    updated = 0
    errors = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT user_id, expiry_date FROM users WHERE subscribed = 1"
        )
        users = await cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for user_id, expiry_date in users:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
                expiry_dt = datetime.strptime(expiry_date, '%d.%m.%Y %H:%M')
                days = (expiry_dt - datetime.now()).days
                
                if days <= 0:
                    print(f"‚è∞ {user_id}: –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
                    continue
                
                # POST –∑–∞–ø—Ä–æ—Å –∫ VPN —Å–µ—Ä–≤–µ—Ä—É
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{server_url}/giveconfig",
                        json={"time": days, "id": str(user_id), "server": location_code},
                        headers={"X-API-Key": api_key, "Content-Type": "application/json"}
                    ) as resp:
                        if resp.status == 200:
                            result = await resp.json()
                            config = result.get("config")
                            
                            if config:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                await conn.execute(
                                    "UPDATE users SET config = ?, last_update = ? WHERE user_id = ?",
                                    (config, datetime.now().strftime('%d.%m.%Y %H:%M'), user_id)
                                )
                                updated += 1
                                print(f"‚úÖ {user_id}: {days} –¥–Ω–µ–π - –æ–±–Ω–æ–≤–ª–µ–Ω")
                            else:
                                print(f"‚ö†Ô∏è {user_id}: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ñ–∏–≥")
                        else:
                            print(f"‚ùå {user_id}: HTTP {resp.status}")
                            errors += 1
                
            except Exception as e:
                print(f"‚ùå {user_id}: {e}")
                errors += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await conn.commit()
    
    print(f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—à–∏–±–æ–∫: {errors}")
    return updated

async def update_specific_users(user_ids, location_code, server_url, api_key):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    await update_specific_users([123456789, 987654321], "us", "https://us.shardtg.ru", "18181818")
    """
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–æ–∫–∞—Ü–∏–µ–π: {location_code}")
    
    updated = 0
    errors = 0
    
    async with aiosqlite.connect(DB_PATH) as conn:
        for user_id in user_ids:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor = await conn.execute(
                    "SELECT expiry_date FROM users WHERE user_id = ? AND subscribed = 1",
                    (user_id,)
                )
                row = await cursor.fetchone()
                
                if not row:
                    print(f"‚ö†Ô∏è {user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                    continue
                
                expiry_date = row[0]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
                expiry_dt = datetime.strptime(expiry_date, '%d.%m.%Y %H:%M')
                days = (expiry_dt - datetime.now()).days
                
                if days <= 0:
                    print(f"‚è∞ {user_id}: –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
                    continue
                
                # POST –∑–∞–ø—Ä–æ—Å –∫ VPN —Å–µ—Ä–≤–µ—Ä—É
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{server_url}/giveconfig",
                        json={"time": days, "id": str(user_id), "server": location_code},
                        headers={"X-API-Key": api_key, "Content-Type": "application/json"}
                    ) as resp:
                        if resp.status == 200:
                            result = await resp.json()
                            config = result.get("config")
                            
                            if config:
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                await conn.execute(
                                    "UPDATE users SET config = ?, last_update = ? WHERE user_id = ?",
                                    (config, datetime.now().strftime('%d.%m.%Y %H:%M'), user_id)
                                )
                                updated += 1
                                print(f"‚úÖ {user_id}: {days} –¥–Ω–µ–π - –æ–±–Ω–æ–≤–ª–µ–Ω")
                            else:
                                print(f"‚ö†Ô∏è {user_id}: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ñ–∏–≥")
                        else:
                            print(f"‚ùå {user_id}: HTTP {resp.status}")
                            errors += 1
                
            except Exception as e:
                print(f"‚ùå {user_id}: {e}")
                errors += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await conn.commit()
    
    print(f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—à–∏–±–æ–∫: {errors}")
    return updated

async def get_active_users_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE subscribed = 1"
        )
        count = await cursor.fetchone()[0]
        return count

# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
async def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_count = await get_active_users_count()
    print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_count}")
    
    if active_count == 0:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    await quick_update_users("us", "https://us.shardtg.ru", "18181818")
    
    # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # await update_specific_users([123456789, 987654321], "us", "https://us.shardtg.ru", "18181818")

if __name__ == "__main__":
    asyncio.run(main())
